import React from 'react';
import { ViewProps, NativeSyntheticEvent } from 'react-native';
declare type CheckBoxEvent = NativeSyntheticEvent<Readonly<{
    target: number;
    value: boolean;
    name: 'animation' | 'tap';
}>>;
declare const CheckBoxWithRef: React.ForwardRefExoticComponent<Readonly<Readonly<ViewProps & {
    /**
     * Used to get the ref for the native checkbox
     */
    forwardedRef?: ((instance: import("react-native").NativeMethodsMixinStatic | null) => void) | React.RefObject<import("react-native").NativeMethodsMixinStatic> | null | undefined;
    /**
     * The value of the checkbox.  If true the checkbox will be turned on.
     * Default value is false.
     */
    value?: boolean | undefined;
    /**
     * Used in case the props change removes the component.
     */
    onChange?: ((event: CheckBoxEvent) => void) | undefined;
    /**
     * Invoked with the new value when the value changes.
     */
    onValueChange?: ((value: boolean) => void) | undefined;
    /**
     * If true the user won't be able to toggle the checkbox.
     * Default value is false.
     * @TODO: implement disable prop for IOS
     */
    disabled?: boolean | undefined;
    /**
     * Used to locate this view in end-to-end tests.
     */
    testID?: string | undefined;
}> & {
    onAnimationDidStop?: Function | undefined;
    lineWidth?: number | undefined;
    hideBox?: boolean | undefined;
    boxType?: "circle" | "square" | undefined;
    tintColor?: string | undefined;
    onCheckColor?: string | undefined;
    onFillColor?: string | undefined;
    onTintColor?: string | undefined;
    animationDuration?: number | undefined;
    onAnimationType?: "fill" | "stroke" | "flat" | "fade" | "bounce" | "one-stroke" | undefined;
    offAnimationType?: "fill" | "stroke" | "flat" | "fade" | "bounce" | "one-stroke" | undefined;
}> & React.RefAttributes<import("react-native").NativeMethodsMixinStatic>>;
export default CheckBoxWithRef;
